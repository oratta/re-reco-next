generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "darwin-arm64"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_NON_POOLING")
}

model Cast {
  id                          String               @id @default(uuid())
  code                        String               @unique
  name                        String?
  age                         Int?
  height                      Int?
  bust                        Int?
  cup                         String?
  waist                       Int?
  hip                         Int?
  areaCode                    String
  groupCode                   String
  averageTotalCount           Float
  totalReservationRate        Float
  recent1ReservationRate      Float
  recent5ReservationRate      Float
  recent30daysReservationRate Float
  jobCount                    Int                @default(0)
  reservationUrl              String
  createdAt                   DateTime             @default(now())
  updatedAt                   DateTime             @updatedAt
  group                       Group                @relation(fields: [groupCode], references: [code])
  area                        Area                 @relation(fields: [areaCode], references: [code])
  jobReservationRates         JobReservationRate[]
}

model Group {
  id                          String   @id @default(uuid())
  code                        String   @unique
  areaCode                    String
  name                        String?
  totalReservationRate        Float
  recent1ReservationRate      Float
  recent5ReservationRate      Float
  recent30daysReservationRate Float
  jobCount                    Int     @default(0)
  reservationListUrl          String
  createdAt                   DateTime @default(now())
  updatedAt                   DateTime @updatedAt
  casts                       Cast[]
  area                        Area     @relation(fields: [areaCode], references: [code])
  jobReservationRates         JobReservationRate[]
}

model Area {
  id          String       @id @default(uuid())
  name        String
  code        String       @unique
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  jobListings JobListing[]
  casts        Cast[]
  groups       Group[]
  jobReservationRates JobReservationRate[]
}

model JobListing {
  id                  String               @id @default(uuid())
  status              String
  areaCode            String
  targetDate          DateTime
  listCount           Int
  condition           String
  result              String?
  startedAt           DateTime?
  completedAt         DateTime?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  area                Area                 @relation(fields: [areaCode], references: [code])
  jobReservationRates JobReservationRate[]
}

model JobReservationRate {
  id            String     @id @default(uuid())
  status        String
  castCode      String
  areaCode      String
  groupCode     String
  reservedRate  Float
  reservedCount Int
  emptyCount    Int
  totalCount    Int
  result        String?
  jobListingId  String
  isLastList    Boolean
  startedAt     DateTime?
  completedAt   DateTime?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  jobListing    JobListing @relation(fields: [jobListingId], references: [id])
  cast          Cast      @relation(fields: [castCode], references: [code])
  group         Group     @relation(fields: [groupCode], references: [code])
  area          Area      @relation(fields: [areaCode], references: [code])
}

model Job {
  id          String    @id @default(uuid())
  status      String
  createdAt   DateTime  @default(now())
  startedAt   DateTime?
  completedAt DateTime?
  result      String?
}
