generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "darwin-arm64"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Cast {
  id                          String               @id @default(uuid())
  code                        String               @unique
  name                        String
  groupId                     String
  averageTotalCount           Float
  totalReservationRate        Float
  recent1ReservationRate      Float
  recent5ReservationRate      Float
  recent30daysReservationRate Float
  reservationUrl              String
  createdAt                   DateTime             @default(now())
  updatedAt                   DateTime             @updatedAt
  group                       Group                @relation(fields: [groupId], references: [id])
  jobReservationRates         JobReservationRate[]
}

model Group {
  id                          String   @id @default(uuid())
  code                        String   @unique
  name                        String
  totalReservationRate        Float
  recent1ReservationRate      Float
  recent5ReservationRate      Float
  recent30daysReservationRate Float
  reservationListUrl          String
  createdAt                   DateTime @default(now())
  updatedAt                   DateTime @updatedAt
  casts                       Cast[]
}

model Area {
  id          String       @id @default(uuid())
  name        String
  code        String       @unique
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  jobListings JobListing[]
}

model JobListing {
  id                  String               @id @default(uuid())
  status              String
  areaId              String
  targetDate          DateTime
  listCount           Int
  condition           String
  result              String?
  startedAt           DateTime?
  completedAt         DateTime?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  area                Area                 @relation(fields: [areaId], references: [id])
  jobReservationRates JobReservationRate[]
}

model JobReservationRate {
  id            String     @id @default(uuid())
  status        String
  castId        String
  areaCode      String
  groupCode     String
  reservedRate  Float
  reservedCount Int
  emptyCount    Int
  totalCount    Int
  result        String?
  jobListingId  String
  isLastList    Boolean
  startedAt     DateTime?
  completedAt   DateTime?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  jobListing    JobListing @relation(fields: [jobListingId], references: [id])
  cast          Cast       @relation(fields: [castId], references: [id])
}

model Job {
  id          String    @id @default(uuid())
  status      String
  createdAt   DateTime  @default(now())
  startedAt   DateTime?
  completedAt DateTime?
  result      String?
}
